<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/components/Skeleton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/Skeleton.tsx" />
              <option name="updatedContent" value="interface SkeletonProps { className?: string }&#10;export function Skeleton({ className = '' }: SkeletonProps) {&#10;  return &lt;div className={`animate-pulse bg-gray-200 rounded ${className}`} /&gt;;&#10;}&#10;&#10;export function IdeaCardSkeleton() {&#10;  return (&#10;    &lt;div className=&quot;border border-gray-200 rounded-lg p-4 bg-white shadow-sm flex flex-col gap-3&quot;&gt;&#10;      &lt;Skeleton className=&quot;h-4 w-2/3&quot; /&gt;&#10;      &lt;div className=&quot;flex gap-2&quot;&gt;&#10;        &lt;Skeleton className=&quot;h-3 w-16&quot; /&gt;&#10;        &lt;Skeleton className=&quot;h-3 w-12&quot; /&gt;&#10;      &lt;/div&gt;&#10;      &lt;Skeleton className=&quot;h-3 w-full&quot; /&gt;&#10;      &lt;Skeleton className=&quot;h-3 w-5/6&quot; /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export function IdeaDetailSkeleton() {&#10;  return (&#10;    &lt;div className=&quot;w-full max-w-2xl rounded-xl border border-gray-200 bg-white shadow-sm p-6 flex flex-col gap-5 animate-pulse&quot;&gt;&#10;      &lt;Skeleton className=&quot;h-7 w-1/2&quot; /&gt;&#10;      &lt;div className=&quot;flex gap-2&quot;&gt; &#10;        &lt;Skeleton className=&quot;h-5 w-20&quot; /&gt;&#10;        &lt;Skeleton className=&quot;h-5 w-16&quot; /&gt;&#10;      &lt;/div&gt;&#10;      &lt;Skeleton className=&quot;h-3 w-full&quot; /&gt;&#10;      &lt;Skeleton className=&quot;h-3 w-5/6&quot; /&gt;&#10;      &lt;Skeleton className=&quot;h-3 w-2/3&quot; /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export function FormSkeleton({ rows = 5 }: { rows?: number }) {&#10;  return (&#10;    &lt;div className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-6 bg-white shadow-sm flex flex-col gap-6 animate-pulse&quot;&gt;&#10;      {Array.from({ length: rows }).map((_, i) =&gt; (&#10;        &lt;div key={i} className=&quot;flex flex-col gap-2&quot;&gt;&#10;          &lt;Skeleton className=&quot;h-3 w-24&quot; /&gt;&#10;          &lt;Skeleton className=&quot;h-9 w-full&quot; /&gt;&#10;        &lt;/div&gt;&#10;      ))}&#10;      &lt;div className=&quot;flex gap-3&quot;&gt;&#10;        &lt;Skeleton className=&quot;h-10 w-28&quot; /&gt;&#10;        &lt;Skeleton className=&quot;h-10 w-24&quot; /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/dashboard/add/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/dashboard/add/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { supabase } from &quot;../../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../../utils/ensureProfile&quot;;&#10;import { z } from &quot;zod&quot;;&#10;import { CATEGORY_VALUES } from &quot;../../utils/constants&quot;;&#10;&#10;const categoryEnum = z.enum([...(CATEGORY_VALUES as readonly string[])] as [string, ...string[]]);&#10;const ideaSchema = z.object({&#10;  title: z.string().min(3).max(120),&#10;  category: z.union([categoryEnum, z.null(), z.literal(&quot;&quot;)]).transform(v=&gt; v === &quot;&quot; ? null : v),&#10;  description: z.string().min(10).max(2000),&#10;  supplies: z.string().optional().or(z.literal(&quot;&quot;)).transform(v=&gt;v||null),&#10;  time_required: z.number().int().min(1).max(240),&#10;  tags: z.array(z.string()).max(8)&#10;});&#10;&#10;export default function AddIdeaPage() {&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [isAuthed, setIsAuthed] = useState(false);&#10;  const [title, setTitle] = useState(&quot;&quot;);&#10;  const [category, setCategory] = useState(&quot;&quot;);&#10;  const [description, setDescription] = useState(&quot;&quot;);&#10;  const [supplies, setSupplies] = useState(&quot;&quot;);&#10;  const [timeRequired, setTimeRequired] = useState&lt;number | ''&gt;('');&#10;  const [saving, setSaving] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [tags, setTags] = useState&lt;string[]&gt;([]);&#10;  const presetTags = [&quot;breathing&quot;,&quot;gratitude&quot;,&quot;stretch&quot;,&quot;walk&quot;,&quot;journal&quot;,&quot;yoga&quot;,&quot;hydrate&quot;,&quot;budget&quot;,&quot;declutter&quot;,&quot;read&quot;,&quot;meditate&quot;,&quot;affirmations&quot;];&#10;&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    const check = async () =&gt; {&#10;      const { data } = await supabase.auth.getSession();&#10;      if (!mounted) return;&#10;      setIsAuthed(!!data.session);&#10;      setAuthChecked(true);&#10;      if (!data.session) {&#10;        window.location.replace('/login');&#10;      } else {&#10;        ensureProfile();&#10;      }&#10;    };&#10;    check();&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_e, session) =&gt; {&#10;      if (!mounted) return;&#10;      setIsAuthed(!!session);&#10;      if (!session) window.location.replace('/login');&#10;    });&#10;    return () =&gt; { mounted = false; listener?.subscription.unsubscribe(); };&#10;  }, []);&#10;&#10;  const handleTagToggle = (t: string) =&gt; {&#10;    setTags(prev =&gt; prev.includes(t) ? prev.filter(x=&gt;x!==t) : [...prev, t]);&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setError(null);&#10;    const parsed = ideaSchema.safeParse({&#10;      title,&#10;      category: category || &quot;&quot;,&#10;      description,&#10;      supplies,&#10;      time_required: typeof timeRequired === 'number'? timeRequired : Number(timeRequired),&#10;      tags&#10;    });&#10;    if (!parsed.success) {&#10;      setError(parsed.error.issues.map(i=&gt;i.message).join(&quot;; &quot;));&#10;      return;&#10;    }&#10;    setSaving(true);&#10;    const { data: { user } } = await supabase.auth.getUser();&#10;    if (!user) { setError('Not authenticated'); setSaving(false); return; }&#10;&#10;    const baseRecord = {&#10;      user_id: user.id,&#10;      title: title.trim(),&#10;      category: parsed.data.category,&#10;      description: description.trim(),&#10;      supplies: supplies?.trim() || null,&#10;      time_required: parsed.data.time_required&#10;    };&#10;&#10;    const { data: inserted, error: insertError } = await supabase.from('self_care_ideas')&#10;      .insert(baseRecord)&#10;      .select('id')&#10;      .single();&#10;&#10;    if (insertError) {&#10;      setError(insertError.message);&#10;      setSaving(false);&#10;      return;&#10;    }&#10;&#10;    const ideaId = inserted?.id;&#10;    if (ideaId &amp;&amp; tags.length) {&#10;      await supabase.from('tags').upsert(tags.map(name=&gt;({ name })), { onConflict: 'name' });&#10;      const { data: tagRows } = await supabase.from('tags').select('id,name').in('name', tags);&#10;      if (tagRows) {&#10;        await supabase.from('idea_tags').insert(tagRows.map(tr =&gt; ({ idea_id: ideaId, tag_id: tr.id })));&#10;      }&#10;    }&#10;&#10;    window.location.replace(`/ideas/${ideaId}`);&#10;    setSaving(false);&#10;  };&#10;&#10;  if (!authChecked) return &lt;div className=&quot;min-h-screen flex items-center justify-center text-gray-400&quot;&gt;Checking authentication...&lt;/div&gt;;&#10;  if (!isAuthed) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-between items-center mb-4&quot;&gt;&#10;        &lt;a href=&quot;/dashboard&quot; className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300 rounded px-4 py-2 hover:border-orange-300 transition&quot;&gt;Orange Blossom&lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a href=&quot;/dashboard&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&gt;Dashboard&lt;/a&gt;&#10;          &lt;a href=&quot;/profile&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&gt;Profile&lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6 text-gray-700&quot;&gt;Add Self Care Idea&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-6 bg-white shadow-sm flex flex-col gap-5&quot;&gt;&#10;        {error &amp;&amp; &lt;div className=&quot;text-sm text-red-500&quot;&gt;{error}&lt;/div&gt;}&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Title *&lt;/label&gt;&#10;          &lt;input value={title} onChange={e=&gt;setTitle(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; placeholder=&quot;e.g. 5‑minute breathing reset&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Category&lt;/label&gt;&#10;          &lt;select value={category} onChange={e=&gt;setCategory(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot;&gt;&#10;            &lt;option value=&quot;&quot;&gt;Select a category&lt;/option&gt;&#10;            {CATEGORY_VALUES.map(c =&gt; &lt;option key={c} value={c}&gt;{c}&lt;/option&gt;)}&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Time Required (minutes) *&lt;/label&gt;&#10;          &lt;input type=&quot;number&quot; value={timeRequired} onChange={e=&gt;setTimeRequired(e.target.value? parseInt(e.target.value,10): '')} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; min={1} max={240} /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Description *&lt;/label&gt;&#10;          &lt;textarea value={description} onChange={e=&gt;setDescription(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300 min-h-[120px]&quot; placeholder=&quot;Describe the steps...&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Supplies (optional)&lt;/label&gt;&#10;          &lt;input value={supplies} onChange={e=&gt;setSupplies(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; placeholder=&quot;Yoga mat, notebook...&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Tags (select up to 8)&lt;/label&gt;&#10;          &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;            {presetTags.map(t =&gt; (&#10;              &lt;button type=&quot;button&quot; key={t} onClick={()=&gt;handleTagToggle(t)} className={`px-3 py-1 rounded border text-xs ${tags.includes(t)?'border-orange-400 bg-orange-50 text-orange-600':'border-gray-300 text-gray-500 hover:border-orange-300'}`}&gt;{t}&lt;/button&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;          {tags.length&gt;0 &amp;&amp; &lt;div className=&quot;text-xs text-gray-400&quot;&gt;Selected: {tags.join(', ')}&lt;/div&gt;}&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;button type=&quot;submit&quot; disabled={saving} className=&quot;border border-gray-300 rounded px-5 py-2 text-gray-600 hover:border-orange-300 disabled:opacity-50&quot;&gt;{saving? 'Saving...' : 'Save Idea'}&lt;/button&gt;&#10;          &lt;a href=&quot;/dashboard&quot; className=&quot;border border-gray-300 rounded px-5 py-2 text-gray-500 hover:border-orange-300&quot;&gt;Cancel&lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { supabase } from &quot;../../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../../utils/ensureProfile&quot;;&#10;import { CATEGORY_VALUES } from &quot;../../utils/constants&quot;;&#10;&#10;export default function AddIdeaPage() {&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [isAuthed, setIsAuthed] = useState(false);&#10;  const [title, setTitle] = useState(&quot;&quot;);&#10;  const [category, setCategory] = useState(&quot;&quot;);&#10;  const [description, setDescription] = useState(&quot;&quot;);&#10;  const [supplies, setSupplies] = useState(&quot;&quot;);&#10;  const [timeRequired, setTimeRequired] = useState&lt;number | ''&gt;('');&#10;  const [saving, setSaving] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    const check = async () =&gt; {&#10;      const { data } = await supabase.auth.getSession();&#10;      if (!mounted) return;&#10;      setIsAuthed(!!data.session);&#10;      setAuthChecked(true);&#10;      if (!data.session) {&#10;        window.location.replace('/login');&#10;      } else {&#10;        ensureProfile();&#10;      }&#10;    };&#10;    check();&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_e, session) =&gt; {&#10;      if (!mounted) return;&#10;      setIsAuthed(!!session);&#10;      if (!session) window.location.replace('/login');&#10;    });&#10;    return () =&gt; { mounted = false; listener?.subscription.unsubscribe(); };&#10;  }, []);&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setError(null);&#10;    if (!title.trim()) { setError('Title is required'); return; }&#10;    if (!description.trim()) { setError('Description is required'); return; }&#10;    const minutes = typeof timeRequired === 'number' ? timeRequired : Number(timeRequired);&#10;    if (!minutes || minutes &lt;= 0) { setError('Time required must be &gt; 0'); return; }&#10;    setSaving(true);&#10;    const { data: { user } } = await supabase.auth.getUser();&#10;    if (!user) { setError('Not authenticated'); setSaving(false); return; }&#10;    const { error: insertError } = await supabase.from('self_care_ideas').insert({&#10;      user_id: user.id,&#10;      title: title.trim(),&#10;      category: category || null,&#10;      description: description.trim(),&#10;      supplies: supplies.trim() || null,&#10;      time_required: minutes&#10;    });&#10;    if (insertError) {&#10;      setError(insertError.message);&#10;      setSaving(false);&#10;      return;&#10;    }&#10;    window.location.replace('/dashboard');&#10;  };&#10;&#10;  if (!authChecked) return &lt;div className=&quot;min-h-screen flex items-center justify-center text-gray-400&quot;&gt;Checking authentication...&lt;/div&gt;;&#10;  if (!isAuthed) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-between items-center mb-4&quot;&gt;&#10;        &lt;a href=&quot;/dashboard&quot; className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300 rounded px-4 py-2 hover:border-orange-300 transition&quot;&gt;Orange Blossom&lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a href=&quot;/dashboard&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&gt;Dashboard&lt;/a&gt;&#10;          &lt;a href=&quot;/profile&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&gt;Profile&lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6 text-gray-700&quot;&gt;Add Self Care Idea&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-6 bg-white shadow-sm flex flex-col gap-5&quot;&gt;&#10;        {error &amp;&amp; &lt;div className=&quot;text-sm text-red-500&quot;&gt;{error}&lt;/div&gt;}&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Title *&lt;/label&gt;&#10;          &lt;input value={title} onChange={e=&gt;setTitle(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; placeholder=&quot;e.g. 5‑minute breathing reset&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Category&lt;/label&gt;&#10;          &lt;select value={category} onChange={e=&gt;setCategory(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot;&gt;&#10;            &lt;option value=&quot;&quot;&gt;Select a category&lt;/option&gt;&#10;            {CATEGORY_VALUES.map(c =&gt; &lt;option key={c} value={c}&gt;{c}&lt;/option&gt;)}&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Time Required (minutes) *&lt;/label&gt;&#10;          &lt;input type=&quot;number&quot; value={timeRequired} onChange={e=&gt;setTimeRequired(e.target.value? parseInt(e.target.value,10): '')} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; min={1} max={240} /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Description *&lt;/label&gt;&#10;          &lt;textarea value={description} onChange={e=&gt;setDescription(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300 min-h-[120px]&quot; placeholder=&quot;Describe the steps...&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;          &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Supplies (optional)&lt;/label&gt;&#10;          &lt;input value={supplies} onChange={e=&gt;setSupplies(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; placeholder=&quot;Yoga mat, notebook...&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;button type=&quot;submit&quot; disabled={saving} className=&quot;border border-gray-300 rounded px-5 py-2 text-gray-600 hover:border-orange-300 disabled:opacity-50&quot;&gt;{saving? 'Saving...' : 'Save Idea'}&lt;/button&gt;&#10;          &lt;a href=&quot;/dashboard&quot; className=&quot;border border-gray-300 rounded px-5 py-2 text-gray-500 hover:border-orange-300&quot;&gt;Cancel&lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/dashboard/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/dashboard/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { supabase } from &quot;../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../utils/ensureProfile&quot;;&#10;&#10;export default function Dashboard() {&#10;  const [ideas, setIdeas] = useState&lt;any[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [isAuthed, setIsAuthed] = useState(false);&#10;  const [search, setSearch] = useState(&quot;&quot;);&#10;  const [categoryFilter, setCategoryFilter] = useState(&quot;&quot;);&#10;  const [timeFilter, setTimeFilter] = useState(&quot;&quot;);&#10;  const [page, setPage] = useState(0);&#10;  const PAGE_SIZE = 20;&#10;  const categories = [&quot;Creative&quot;,&quot;Relaxing&quot;,&quot;Mindful&quot;,&quot;Energizing&quot;,&quot;Restorative&quot;,&quot;Social&quot;,&quot;Financial&quot;,&quot;Nourishing&quot;,&quot;Organizing&quot;,&quot;Learning&quot;,&quot;Nature-based&quot;,&quot;Reflective&quot;,&quot;Playful&quot;,&quot;Confidence-building&quot;,&quot;Gratifying&quot;];&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    let isMounted = true;&#10;    const checkSession = async () =&gt; {&#10;      // Use Supabase's recommended session check&#10;      const { data } = await supabase.auth.getSession();&#10;      if (isMounted) {&#10;        setIsAuthed(!!data.session);&#10;        setAuthChecked(true);&#10;        if (!data.session) {&#10;          // Prevent rendering and redirect immediately&#10;          window.location.replace(&quot;/login&quot;);&#10;        }&#10;      }&#10;    };&#10;    checkSession();&#10;    // Listen for auth state changes&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) =&gt; {&#10;      if (isMounted) {&#10;        setIsAuthed(!!session);&#10;        setAuthChecked(true);&#10;        if (!session) {&#10;          window.location.replace(&quot;/login&quot;);&#10;        }&#10;      }&#10;    });&#10;    return () =&gt; {&#10;      isMounted = false;&#10;      listener?.subscription.unsubscribe();&#10;    };&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (authChecked &amp;&amp; !isAuthed) {&#10;      window.location.replace(&quot;/login&quot;);&#10;    }&#10;  }, [authChecked, isAuthed]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isAuthed) {&#10;      async function fetchIdeas(reset = false) {&#10;        if (reset) {&#10;          setIdeas([]);&#10;          setPage(0);&#10;        }&#10;        setLoading(true);&#10;        let from = reset ? 0 : page * PAGE_SIZE;&#10;        let to = from + PAGE_SIZE - 1;&#10;        let query = supabase&#10;          .from(&quot;self_care_ideas&quot;)&#10;          .select(&quot;id, slug, title, category, description, supplies, time_required, profiles:profiles!self_care_ideas_user_id_fkey(username)&quot;)&#10;          .order(&quot;created_at&quot;, { ascending: false })&#10;          .range(from, to);&#10;        if (categoryFilter) query = query.eq(&quot;category&quot;, categoryFilter);&#10;        if (timeFilter) {&#10;          if (timeFilter === &quot;15&quot;) query = query.lte(&quot;time_required&quot;, 15);&#10;          else if (timeFilter === &quot;30&quot;) query = query.lte(&quot;time_required&quot;, 30);&#10;          else if (timeFilter === &quot;60+&quot;) query = query.gte(&quot;time_required&quot;, 60);&#10;        }&#10;        if (search.trim()) {&#10;          const term = search.trim();&#10;            query = query.or(`title.ilike.%${term}%,description.ilike.%${term}%`);&#10;        }&#10;        const { data, error } = await query;&#10;        if (!error &amp;&amp; data) {&#10;          setIdeas(prev =&gt; (reset ? data : [...prev, ...data]));&#10;        }&#10;        setLoading(false);&#10;      }&#10;      fetchIdeas(true);&#10;    }&#10;  // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [isAuthed, categoryFilter, timeFilter, search]);&#10;&#10;  const loadMore = async () =&gt; {&#10;    setPage(p =&gt; p + 1);&#10;    const nextPage = page + 1;&#10;    setLoading(true);&#10;    let from = nextPage * PAGE_SIZE;&#10;    let to = from + PAGE_SIZE - 1;&#10;    let query = supabase&#10;      .from(&quot;self_care_ideas&quot;)&#10;      .select(&quot;id, slug, title, category, description, supplies, time_required, profiles:profiles!self_care_ideas_user_id_fkey(username)&quot;)&#10;      .order(&quot;created_at&quot;, { ascending: false })&#10;      .range(from, to);&#10;    if (categoryFilter) query = query.eq(&quot;category&quot;, categoryFilter);&#10;    if (timeFilter) {&#10;      if (timeFilter === &quot;15&quot;) query = query.lte(&quot;time_required&quot;, 15);&#10;      else if (timeFilter === &quot;30&quot;) query = query.lte(&quot;time_required&quot;, 30);&#10;      else if (timeFilter === &quot;60+&quot;) query = query.gte(&quot;time_required&quot;, 60);&#10;    }&#10;    if (search.trim()) {&#10;      const term = search.trim();&#10;      query = query.or(`title.ilike.%${term}%,description.ilike.%${term}%`);&#10;    }&#10;    const { data } = await query;&#10;    if (data) setIdeas(prev =&gt; [...prev, ...data]);&#10;    setLoading(false);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    if (isAuthed) {&#10;      ensureProfile();&#10;    }&#10;  }, [isAuthed]);&#10;&#10;  // Add logout handler&#10;  const handleLogout = async () =&gt; {&#10;    await supabase.auth.signOut();&#10;    window.location.replace(&quot;/login&quot;);&#10;  };&#10;&#10;  if (!authChecked) {&#10;    return &lt;div className=&quot;min-h-screen flex items-center justify-center text-gray-400&quot;&gt;Checking authentication...&lt;/div&gt;;&#10;  }&#10;  if (!isAuthed) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-between items-center mb-4&quot;&gt;&#10;        &lt;a&#10;          href=&quot;/dashboard&quot;&#10;          className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300 rounded px-4 py-2 hover:border-orange-300 transition&quot;&#10;        &gt;&#10;          Orange Blossom&#10;        &lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a&#10;            href=&quot;/dashboard&quot;&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Dashboard&#10;          &lt;/a&gt;&#10;          &lt;a&#10;            href=&quot;/profile&quot;&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Profile&#10;          &lt;/a&gt;&#10;          &lt;button&#10;            onClick={handleLogout}&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Log Out&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6 text-gray-700&quot;&gt;Dashboard&lt;/h1&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-end mb-6&quot;&gt;&#10;        &lt;a&#10;          href=&quot;/dashboard/add&quot;&#10;          className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;        &gt;&#10;          Add Idea&#10;        &lt;/a&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-4 mb-6 flex flex-col gap-4 bg-white&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;          &lt;label className=&quot;text-xs uppercase tracking-wide text-gray-400&quot;&gt;Search&lt;/label&gt;&#10;          &lt;input value={search} onChange={e=&gt;setSearch(e.target.value)} placeholder=&quot;Search title or description&quot; className=&quot;border border-gray-300 rounded px-3 py-2 text-sm text-gray-700 focus:outline-none focus:border-orange-300&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-3 gap-4&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;label className=&quot;text-xs uppercase tracking-wide text-gray-400&quot;&gt;Category&lt;/label&gt;&#10;            &lt;select value={categoryFilter} onChange={e=&gt;setCategoryFilter(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-sm text-gray-700 focus:outline-none focus:border-orange-300&quot;&gt;&#10;              &lt;option value=&quot;&quot;&gt;All&lt;/option&gt;&#10;              {categories.map(c =&gt; &lt;option key={c} value={c}&gt;{c}&lt;/option&gt;)}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;label className=&quot;text-xs uppercase tracking-wide text-gray-400&quot;&gt;Time&lt;/label&gt;&#10;            &lt;select value={timeFilter} onChange={e=&gt;setTimeFilter(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-sm text-gray-700 focus:outline-none focus:border-orange-300&quot;&gt;&#10;              &lt;option value=&quot;&quot;&gt;Any&lt;/option&gt;&#10;              &lt;option value=&quot;15&quot;&gt;Up to 15&lt;/option&gt;&#10;              &lt;option value=&quot;30&quot;&gt;Up to 30&lt;/option&gt;&#10;              &lt;option value=&quot;60+&quot;&gt;60+&lt;/option&gt;&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;label className=&quot;text-xs uppercase tracking-wide text-gray-400&quot;&gt;Actions&lt;/label&gt;&#10;            &lt;button onClick={()=&gt;{setSearch(&quot;&quot;);setCategoryFilter(&quot;&quot;);setTimeFilter(&quot;&quot;);}} className=&quot;border border-gray-300 rounded px-3 py-2 text-sm text-gray-600 hover:border-orange-300&quot;&gt;Reset&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;h2 className=&quot;text-lg text-gray-500 mb-8&quot;&gt;Self care ideas uploaded by other users&lt;/h2&gt;&#10;      {loading ? (&#10;        &lt;div className=&quot;text-gray-400&quot;&gt;Loading...&lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;w-full max-w-xl flex flex-col gap-4&quot;&gt;&#10;          {ideas.length === 0 ? (&#10;            &lt;div className=&quot;text-gray-400&quot;&gt;No self care ideas found.&lt;/div&gt;&#10;          ) : (&#10;            ideas.map((idea: any) =&gt; (&#10;              &lt;a href={`/ideas/${idea.slug || idea.id}`} key={idea.id} className=&quot;border border-gray-200 rounded-lg p-4 bg-white shadow-sm hover:border-orange-300 transition&quot;&gt;&#10;                &lt;h3 className=&quot;font-semibold text-gray-700 mb-1&quot;&gt;{idea.title}&lt;/h3&gt;&#10;                &lt;div className=&quot;flex flex-wrap gap-2 text-xs text-gray-400 mb-2 items-center&quot;&gt;&#10;                  {idea.category &amp;&amp; &lt;span&gt;{idea.category}&lt;/span&gt;}&#10;                  {idea.time_required &amp;&amp; &lt;&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;{idea.time_required} min&lt;/span&gt;&lt;/&gt;}&#10;                  {idea.profiles?.username &amp;&amp; &lt;&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;by {idea.profiles.username}&lt;/span&gt;&lt;/&gt;}&#10;                &lt;/div&gt;&#10;                {idea.description &amp;&amp; (&#10;                  &lt;p className=&quot;text-gray-500 text-sm line-clamp-3&quot;&gt;{idea.description}&lt;/p&gt;&#10;                )}&#10;              &lt;/a&gt;&#10;            ))&#10;          )}&#10;          {ideas.length &gt; 0 &amp;&amp; (&#10;            &lt;button disabled={loading} onClick={loadMore} className=&quot;mt-2 self-center border border-gray-300 rounded px-4 py-2 text-gray-600 hover:border-orange-300 disabled:opacity-50&quot;&gt;{loading ? 'Loading...' : 'Load More'}&lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { supabase } from &quot;../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../utils/ensureProfile&quot;;&#10;&#10;export default function Dashboard() {&#10;  const [ideas, setIdeas] = useState&lt;any[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [isAuthed, setIsAuthed] = useState(false);&#10;  const [search, setSearch] = useState(&quot;&quot;);&#10;  const [categoryFilter, setCategoryFilter] = useState(&quot;&quot;);&#10;  const [timeFilter, setTimeFilter] = useState(&quot;&quot;);&#10;  const [page, setPage] = useState(0);&#10;  const PAGE_SIZE = 20;&#10;  const categories = [&quot;Creative&quot;,&quot;Relaxing&quot;,&quot;Mindful&quot;,&quot;Energizing&quot;,&quot;Restorative&quot;,&quot;Social&quot;,&quot;Financial&quot;,&quot;Nourishing&quot;,&quot;Organizing&quot;,&quot;Learning&quot;,&quot;Nature-based&quot;,&quot;Reflective&quot;,&quot;Playful&quot;,&quot;Confidence-building&quot;,&quot;Gratifying&quot;];&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    let isMounted = true;&#10;    const checkSession = async () =&gt; {&#10;      // Use Supabase's recommended session check&#10;      const { data } = await supabase.auth.getSession();&#10;      if (isMounted) {&#10;        setIsAuthed(!!data.session);&#10;        setAuthChecked(true);&#10;        if (!data.session) {&#10;          // Prevent rendering and redirect immediately&#10;          window.location.replace(&quot;/login&quot;);&#10;        }&#10;      }&#10;    };&#10;    checkSession();&#10;    // Listen for auth state changes&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) =&gt; {&#10;      if (isMounted) {&#10;        setIsAuthed(!!session);&#10;        setAuthChecked(true);&#10;        if (!session) {&#10;          window.location.replace(&quot;/login&quot;);&#10;        }&#10;      }&#10;    });&#10;    return () =&gt; {&#10;      isMounted = false;&#10;      listener?.subscription.unsubscribe();&#10;    };&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (authChecked &amp;&amp; !isAuthed) {&#10;      window.location.replace(&quot;/login&quot;);&#10;    }&#10;  }, [authChecked, isAuthed]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isAuthed) {&#10;      async function fetchIdeas(reset = false) {&#10;        if (reset) {&#10;          setIdeas([]);&#10;          setPage(0);&#10;        }&#10;        setLoading(true);&#10;        let from = reset ? 0 : page * PAGE_SIZE;&#10;        let to = from + PAGE_SIZE - 1;&#10;        let query = supabase&#10;          .from(&quot;self_care_ideas&quot;)&#10;          .select(&quot;id, title, category, description, supplies, time_required, profiles:profiles!self_care_ideas_user_id_fkey(username)&quot;)&#10;          .order(&quot;created_at&quot;, { ascending: false })&#10;          .range(from, to);&#10;        if (categoryFilter) query = query.eq(&quot;category&quot;, categoryFilter);&#10;        if (timeFilter) {&#10;          if (timeFilter === &quot;15&quot;) query = query.lte(&quot;time_required&quot;, 15);&#10;          else if (timeFilter === &quot;30&quot;) query = query.lte(&quot;time_required&quot;, 30);&#10;          else if (timeFilter === &quot;60+&quot;) query = query.gte(&quot;time_required&quot;, 60);&#10;        }&#10;        if (search.trim()) {&#10;          const term = search.trim();&#10;            query = query.or(`title.ilike.%${term}%,description.ilike.%${term}%`);&#10;        }&#10;        const { data, error } = await query;&#10;        if (!error &amp;&amp; data) {&#10;          setIdeas(prev =&gt; (reset ? data : [...prev, ...data]));&#10;        }&#10;        setLoading(false);&#10;      }&#10;      fetchIdeas(true);&#10;    }&#10;  // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [isAuthed, categoryFilter, timeFilter, search]);&#10;&#10;  const loadMore = async () =&gt; {&#10;    setPage(p =&gt; p + 1);&#10;    const nextPage = page + 1;&#10;    setLoading(true);&#10;    let from = nextPage * PAGE_SIZE;&#10;    let to = from + PAGE_SIZE - 1;&#10;    let query = supabase&#10;      .from(&quot;self_care_ideas&quot;)&#10;      .select(&quot;id, title, category, description, supplies, time_required, profiles:profiles!self_care_ideas_user_id_fkey(username)&quot;)&#10;      .order(&quot;created_at&quot;, { ascending: false })&#10;      .range(from, to);&#10;    if (categoryFilter) query = query.eq(&quot;category&quot;, categoryFilter);&#10;    if (timeFilter) {&#10;      if (timeFilter === &quot;15&quot;) query = query.lte(&quot;time_required&quot;, 15);&#10;      else if (timeFilter === &quot;30&quot;) query = query.lte(&quot;time_required&quot;, 30);&#10;      else if (timeFilter === &quot;60+&quot;) query = query.gte(&quot;time_required&quot;, 60);&#10;    }&#10;    if (search.trim()) {&#10;      const term = search.trim();&#10;      query = query.or(`title.ilike.%${term}%,description.ilike.%${term}%`);&#10;    }&#10;    const { data } = await query;&#10;    if (data) setIdeas(prev =&gt; [...prev, ...data]);&#10;    setLoading(false);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    if (isAuthed) {&#10;      ensureProfile();&#10;    }&#10;  }, [isAuthed]);&#10;&#10;  // Add logout handler&#10;  const handleLogout = async () =&gt; {&#10;    await supabase.auth.signOut();&#10;    window.location.replace(&quot;/login&quot;);&#10;  };&#10;&#10;  if (!authChecked) {&#10;    return &lt;div className=&quot;min-h-screen flex items-center justify-center text-gray-400&quot;&gt;Checking authentication...&lt;/div&gt;;&#10;  }&#10;  if (!isAuthed) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-between items-center mb-4&quot;&gt;&#10;        &lt;a&#10;          href=&quot;/dashboard&quot;&#10;          className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300 rounded px-4 py-2 hover:border-orange-300 transition&quot;&#10;        &gt;&#10;          Orange Blossom&#10;        &lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a&#10;            href=&quot;/dashboard&quot;&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Dashboard&#10;          &lt;/a&gt;&#10;          &lt;a&#10;            href=&quot;/profile&quot;&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Profile&#10;          &lt;/a&gt;&#10;          &lt;button&#10;            onClick={handleLogout}&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Log Out&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6 text-gray-700&quot;&gt;Dashboard&lt;/h1&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-end mb-6&quot;&gt;&#10;        &lt;a&#10;          href=&quot;/dashboard/add&quot;&#10;          className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;        &gt;&#10;          Add Idea&#10;        &lt;/a&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-4 mb-6 flex flex-col gap-4 bg-white&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;          &lt;label className=&quot;text-xs uppercase tracking-wide text-gray-400&quot;&gt;Search&lt;/label&gt;&#10;          &lt;input value={search} onChange={e=&gt;setSearch(e.target.value)} placeholder=&quot;Search title or description&quot; className=&quot;border border-gray-300 rounded px-3 py-2 text-sm text-gray-700 focus:outline-none focus:border-orange-300&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-3 gap-4&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;label className=&quot;text-xs uppercase tracking-wide text-gray-400&quot;&gt;Category&lt;/label&gt;&#10;            &lt;select value={categoryFilter} onChange={e=&gt;setCategoryFilter(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-sm text-gray-700 focus:outline-none focus:border-orange-300&quot;&gt;&#10;              &lt;option value=&quot;&quot;&gt;All&lt;/option&gt;&#10;              {categories.map(c =&gt; &lt;option key={c} value={c}&gt;{c}&lt;/option&gt;)}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;label className=&quot;text-xs uppercase tracking-wide text-gray-400&quot;&gt;Time&lt;/label&gt;&#10;            &lt;select value={timeFilter} onChange={e=&gt;setTimeFilter(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-sm text-gray-700 focus:outline-none focus:border-orange-300&quot;&gt;&#10;              &lt;option value=&quot;&quot;&gt;Any&lt;/option&gt;&#10;              &lt;option value=&quot;15&quot;&gt;Up to 15&lt;/option&gt;&#10;              &lt;option value=&quot;30&quot;&gt;Up to 30&lt;/option&gt;&#10;              &lt;option value=&quot;60+&quot;&gt;60+&lt;/option&gt;&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;label className=&quot;text-xs uppercase tracking-wide text-gray-400&quot;&gt;Actions&lt;/label&gt;&#10;            &lt;button onClick={()=&gt;{setSearch(&quot;&quot;);setCategoryFilter(&quot;&quot;);setTimeFilter(&quot;&quot;);}} className=&quot;border border-gray-300 rounded px-3 py-2 text-sm text-gray-600 hover:border-orange-300&quot;&gt;Reset&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;h2 className=&quot;text-lg text-gray-500 mb-8&quot;&gt;Self care ideas uploaded by other users&lt;/h2&gt;&#10;      {loading ? (&#10;        &lt;div className=&quot;text-gray-400&quot;&gt;Loading...&lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;w-full max-w-xl flex flex-col gap-4&quot;&gt;&#10;          {ideas.length === 0 ? (&#10;            &lt;div className=&quot;text-gray-400&quot;&gt;No self care ideas found.&lt;/div&gt;&#10;          ) : (&#10;            ideas.map((idea: any) =&gt; (&#10;              &lt;a href={`/ideas/${idea.id}`} key={idea.id} className=&quot;border border-gray-200 rounded-lg p-4 bg-white shadow-sm hover:border-orange-300 transition&quot;&gt;&#10;                &lt;h3 className=&quot;font-semibold text-gray-700 mb-1&quot;&gt;{idea.title}&lt;/h3&gt;&#10;                &lt;div className=&quot;flex flex-wrap gap-2 text-xs text-gray-400 mb-2 items-center&quot;&gt;&#10;                  {idea.category &amp;&amp; &lt;span&gt;{idea.category}&lt;/span&gt;}&#10;                  {idea.time_required &amp;&amp; &lt;&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;{idea.time_required} min&lt;/span&gt;&lt;/&gt;}&#10;                  {idea.profiles?.username &amp;&amp; &lt;&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;by {idea.profiles.username}&lt;/span&gt;&lt;/&gt;}&#10;                &lt;/div&gt;&#10;                {idea.description &amp;&amp; (&#10;                  &lt;p className=&quot;text-gray-500 text-sm line-clamp-3&quot;&gt;{idea.description}&lt;/p&gt;&#10;                )}&#10;              &lt;/a&gt;&#10;            ))&#10;          )}&#10;          {ideas.length &gt; 0 &amp;&amp; (&#10;            &lt;button disabled={loading} onClick={loadMore} className=&quot;mt-2 self-center border border-gray-300 rounded px-4 py-2 text-gray-600 hover:border-orange-300 disabled:opacity-50&quot;&gt;{loading ? 'Loading...' : 'Load More'}&lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/ideas/[id]/edit/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/ideas/[id]/edit/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useParams, useRouter } from &quot;next/navigation&quot;;&#10;import { supabase } from &quot;../../../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../../../utils/ensureProfile&quot;;&#10;&#10;export default function EditIdeaPage() {&#10;  const params = useParams();&#10;  const router = useRouter();&#10;  const ideaId = params?.id as string;&#10;&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [sessionUserId, setSessionUserId] = useState&lt;string | null&gt;(null);&#10;  const [loading, setLoading] = useState(true);&#10;  const [saving, setSaving] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  const [title, setTitle] = useState(&quot;&quot;);&#10;  const [category, setCategory] = useState(&quot;&quot;);&#10;  const [description, setDescription] = useState(&quot;&quot;);&#10;  const [supplies, setSupplies] = useState(&quot;&quot;);&#10;  const [timeRequired, setTimeRequired] = useState&lt;number | ''&gt;('');&#10;&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    const init = async () =&gt; {&#10;      const { data: { session } } = await supabase.auth.getSession();&#10;      if (!mounted) return;&#10;      setSessionUserId(session?.user?.id || null);&#10;      setAuthChecked(true);&#10;      if (!session) {&#10;        router.replace('/login');&#10;        return;&#10;      }&#10;      ensureProfile();&#10;    };&#10;    init();&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_e, session) =&gt; {&#10;      if (!mounted) return;&#10;      setSessionUserId(session?.user?.id || null);&#10;      if (!session) router.replace('/login');&#10;    });&#10;    return () =&gt; { mounted = false; listener?.subscription.unsubscribe(); };&#10;  }, [router]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!ideaId || !sessionUserId) return;&#10;    const load = async () =&gt; {&#10;      setLoading(true);&#10;      const { data, error } = await supabase&#10;        .from('self_care_ideas')&#10;        .select('*')&#10;        .eq('id', ideaId)&#10;        .single();&#10;      if (error) {&#10;        setError(error.message);&#10;      } else if (data) {&#10;        if (data.user_id !== sessionUserId) {&#10;          setError('You do not have permission to edit this idea');&#10;        } else {&#10;          setTitle(data.title || '');&#10;            setCategory(data.category || '');&#10;            setDescription(data.description || '');&#10;            setSupplies(data.supplies || '');&#10;            setTimeRequired(data.time_required || '');&#10;        }&#10;      }&#10;      setLoading(false);&#10;    };&#10;    load();&#10;  }, [ideaId, sessionUserId]);&#10;&#10;  const handleSave = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setError(null);&#10;    if (!title.trim()) { setError('Title required'); return; }&#10;    if (!description.trim()) { setError('Description required'); return; }&#10;    if (!timeRequired || timeRequired &lt;= 0) { setError('Time required must be &gt; 0'); return; }&#10;    setSaving(true);&#10;    const { error } = await supabase&#10;      .from('self_care_ideas')&#10;      .update({&#10;        title: title.trim(),&#10;        category: category.trim() || null,&#10;        description: description.trim(),&#10;        supplies: supplies.trim() || null,&#10;        time_required: timeRequired,&#10;        updated_at: new Date().toISOString()&#10;      })&#10;      .eq('id', ideaId);&#10;    if (error) {&#10;      setError(error.message);&#10;    } else {&#10;      router.push(`/ideas/${ideaId}`);&#10;    }&#10;    setSaving(false);&#10;  };&#10;&#10;  if (!authChecked) return &lt;div className=&quot;min-h-screen flex items-center justify-center text-gray-400&quot;&gt;Checking authentication...&lt;/div&gt;;&#10;  if (!sessionUserId) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-between items-center mb-4&quot;&gt;&#10;        &lt;a href=&quot;/dashboard&quot; className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300 rounded px-4 py-2 hover:border-orange-300 transition&quot;&gt;Orange Blossom&lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a href=&quot;/dashboard&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&gt;Dashboard&lt;/a&gt;&#10;          &lt;a href=&quot;/profile&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&gt;Profile&lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6 text-gray-700&quot;&gt;Edit Idea&lt;/h1&gt;&#10;      {loading ? (&#10;        &lt;div className=&quot;text-gray-400&quot;&gt;Loading...&lt;/div&gt;&#10;      ) : error ? (&#10;        &lt;div className=&quot;text-red-500 text-sm max-w-xl mb-4&quot;&gt;{error}&lt;/div&gt;&#10;      ) : (&#10;        &lt;form onSubmit={handleSave} className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-6 bg-white shadow-sm flex flex-col gap-5&quot;&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;text-sm text-red-500&quot;&gt;{error}&lt;/div&gt;}&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Title *&lt;/label&gt;&#10;            &lt;input value={title} onChange={e=&gt;setTitle(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Category&lt;/label&gt;&#10;            &lt;input value={category} onChange={e=&gt;setCategory(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Time Required (minutes) *&lt;/label&gt;&#10;            &lt;input type=&quot;number&quot; value={timeRequired} onChange={e=&gt;setTimeRequired(e.target.value? parseInt(e.target.value,10): '')} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; min={1} max={240} /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Description *&lt;/label&gt;&#10;            &lt;textarea value={description} onChange={e=&gt;setDescription(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300 min-h-[120px]&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Supplies (optional)&lt;/label&gt;&#10;            &lt;input value={supplies} onChange={e=&gt;setSupplies(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex gap-3&quot;&gt;&#10;            &lt;button type=&quot;submit&quot; disabled={saving} className=&quot;border border-gray-300 rounded px-5 py-2 text-gray-600 hover:border-orange-300 disabled:opacity-50&quot;&gt;{saving? 'Saving...' : 'Save Changes'}&lt;/button&gt;&#10;            &lt;a href={`/ideas/${ideaId}`} className=&quot;border border-gray-300 rounded px-5 py-2 text-gray-500 hover:border-orange-300&quot;&gt;Cancel&lt;/a&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useParams, useRouter } from &quot;next/navigation&quot;;&#10;import { supabase } from &quot;../../../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../../../utils/ensureProfile&quot;;&#10;import { CATEGORY_VALUES } from &quot;../../../utils/constants&quot;;&#10;&#10;export default function EditIdeaPage() {&#10;  const params = useParams();&#10;  const router = useRouter();&#10;  const ideaId = params?.id as string;&#10;&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [sessionUserId, setSessionUserId] = useState&lt;string | null&gt;(null);&#10;  const [loading, setLoading] = useState(true);&#10;  const [saving, setSaving] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  const [title, setTitle] = useState(&quot;&quot;);&#10;  const [category, setCategory] = useState(&quot;&quot;);&#10;  const [description, setDescription] = useState(&quot;&quot;);&#10;  const [supplies, setSupplies] = useState(&quot;&quot;);&#10;  const [timeRequired, setTimeRequired] = useState&lt;number | ''&gt;('');&#10;&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    const init = async () =&gt; {&#10;      const { data: { session } } = await supabase.auth.getSession();&#10;      if (!mounted) return;&#10;      setSessionUserId(session?.user?.id || null);&#10;      setAuthChecked(true);&#10;      if (!session) {&#10;        router.replace('/login');&#10;        return;&#10;      }&#10;      ensureProfile();&#10;    };&#10;    init();&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_e, session) =&gt; {&#10;      if (!mounted) return;&#10;      setSessionUserId(session?.user?.id || null);&#10;      if (!session) router.replace('/login');&#10;    });&#10;    return () =&gt; { mounted = false; listener?.subscription.unsubscribe(); };&#10;  }, [router]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!ideaId || !sessionUserId) return;&#10;    const load = async () =&gt; {&#10;      setLoading(true);&#10;      const { data, error } = await supabase&#10;        .from('self_care_ideas')&#10;        .select('*')&#10;        .eq('id', ideaId)&#10;        .single();&#10;      if (error) {&#10;        setError(error.message);&#10;      } else if (data) {&#10;        if (data.user_id !== sessionUserId) {&#10;          setError('You do not have permission to edit this idea');&#10;        } else {&#10;          setTitle(data.title || '');&#10;            setCategory(data.category || '');&#10;            setDescription(data.description || '');&#10;            setSupplies(data.supplies || '');&#10;            setTimeRequired(data.time_required || '');&#10;        }&#10;      }&#10;      setLoading(false);&#10;    };&#10;    load();&#10;  }, [ideaId, sessionUserId]);&#10;&#10;  const handleSave = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setError(null);&#10;    if (!title.trim()) { setError('Title required'); return; }&#10;    if (!description.trim()) { setError('Description required'); return; }&#10;    if (!timeRequired || timeRequired &lt;= 0) { setError('Time required must be &gt; 0'); return; }&#10;    setSaving(true);&#10;    const { error } = await supabase&#10;      .from('self_care_ideas')&#10;      .update({&#10;        title: title.trim(),&#10;        category: category.trim() || null,&#10;        description: description.trim(),&#10;        supplies: supplies.trim() || null,&#10;        time_required: timeRequired,&#10;        updated_at: new Date().toISOString()&#10;      })&#10;      .eq('id', ideaId);&#10;    if (error) {&#10;      setError(error.message);&#10;    } else {&#10;      router.push(`/ideas/${ideaId}`);&#10;    }&#10;    setSaving(false);&#10;  };&#10;&#10;  if (!authChecked) return &lt;div className=&quot;min-h-screen flex items-center justify-center text-gray-400&quot;&gt;Checking authentication...&lt;/div&gt;;&#10;  if (!sessionUserId) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-between items-center mb-4&quot;&gt;&#10;        &lt;a href=&quot;/dashboard&quot; className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300 rounded px-4 py-2 hover:border-orange-300 transition&quot;&gt;Orange Blossom&lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a href=&quot;/dashboard&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&gt;Dashboard&lt;/a&gt;&#10;          &lt;a href=&quot;/profile&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&gt;Profile&lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6 text-gray-700&quot;&gt;Edit Idea&lt;/h1&gt;&#10;      {loading ? (&#10;        &lt;div className=&quot;text-gray-400&quot;&gt;Loading...&lt;/div&gt;&#10;      ) : error ? (&#10;        &lt;div className=&quot;text-red-500 text-sm max-w-xl mb-4&quot;&gt;{error}&lt;/div&gt;&#10;      ) : (&#10;        &lt;form onSubmit={handleSave} className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-6 bg-white shadow-sm flex flex-col gap-5&quot;&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;text-sm text-red-500&quot;&gt;{error}&lt;/div&gt;}&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Title *&lt;/label&gt;&#10;            &lt;input value={title} onChange={e=&gt;setTitle(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Category&lt;/label&gt;&#10;            &lt;select value={category} onChange={e=&gt;setCategory(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot;&gt;&#10;              &lt;option value=&quot;&quot;&gt;Select a category&lt;/option&gt;&#10;              {CATEGORY_VALUES.map(c =&gt; &lt;option key={c} value={c}&gt;{c}&lt;/option&gt;)}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Time Required (minutes) *&lt;/label&gt;&#10;            &lt;input type=&quot;number&quot; value={timeRequired} onChange={e=&gt;setTimeRequired(e.target.value? parseInt(e.target.value,10): '')} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; min={1} max={240} /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Description *&lt;/label&gt;&#10;            &lt;textarea value={description} onChange={e=&gt;setDescription(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300 min-h-[120px]&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;            &lt;label className=&quot;text-sm font-medium text-gray-600&quot;&gt;Supplies (optional)&lt;/label&gt;&#10;            &lt;input value={supplies} onChange={e=&gt;setSupplies(e.target.value)} className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex gap-3&quot;&gt;&#10;            &lt;button type=&quot;submit&quot; disabled={saving} className=&quot;border border-gray-300 rounded px-5 py-2 text-gray-600 hover:border-orange-300 disabled:opacity-50&quot;&gt;{saving? 'Saving...' : 'Save Changes'}&lt;/button&gt;&#10;            &lt;a href={`/ideas/${ideaId}`} className=&quot;border border-gray-300 rounded px-5 py-2 text-gray-500 hover:border-orange-300&quot;&gt;Cancel&lt;/a&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/ideas/[id]/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/ideas/[id]/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useParams, useRouter } from &quot;next/navigation&quot;;&#10;import { supabase } from &quot;../../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../../utils/ensureProfile&quot;;&#10;&#10;interface Idea {&#10;  id: string;&#10;  title: string;&#10;  category: string | null;&#10;  description: string | null;&#10;  supplies: string | null;&#10;  time_required: number | null;&#10;  user_id: string;&#10;  profiles?: { username?: string };&#10;}&#10;&#10;export default function IdeaDetailPage() {&#10;  const params = useParams();&#10;  const router = useRouter();&#10;  const ideaId = params?.id as string;&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [sessionUserId, setSessionUserId] = useState&lt;string | null&gt;(null);&#10;  const [idea, setIdea] = useState&lt;Idea | null&gt;(null);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [deleting, setDeleting] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    const init = async () =&gt; {&#10;      const { data: { session } } = await supabase.auth.getSession();&#10;      if (!mounted) return;&#10;      setSessionUserId(session?.user?.id || null);&#10;      setAuthChecked(true);&#10;      ensureProfile();&#10;    };&#10;    init();&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_e, session) =&gt; {&#10;      if (!mounted) return;&#10;      setSessionUserId(session?.user?.id || null);&#10;    });&#10;    return () =&gt; { mounted = false; listener?.subscription.unsubscribe(); };&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!ideaId) return;&#10;    const fetchIdea = async () =&gt; {&#10;      setLoading(true);&#10;      setError(null);&#10;      const { data, error } = await supabase&#10;        .from(&quot;self_care_ideas&quot;)&#10;        .select(&quot;id, title, category, description, supplies, time_required, user_id, profiles:profiles!self_care_ideas_user_id_fkey(username)&quot;)&#10;        .eq(&quot;id&quot;, ideaId)&#10;        .single();&#10;      if (error) setError(error.message); else setIdea(data as Idea);&#10;      setLoading(false);&#10;    };&#10;    fetchIdea();&#10;  }, [ideaId]);&#10;&#10;  const handleDelete = async () =&gt; {&#10;    if (!idea) return;&#10;    if (!confirm(&quot;Delete this idea?&quot;)) return;&#10;    setDeleting(true);&#10;    const { error } = await supabase.from(&quot;self_care_ideas&quot;).delete().eq(&quot;id&quot;, idea.id);&#10;    if (error) {&#10;      alert(error.message);&#10;      setDeleting(false);&#10;      return;&#10;    }&#10;    router.push('/dashboard');&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gradient-to-b from-white to-gray-100 font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-2xl flex justify-between items-center mb-6&quot;&gt;&#10;        &lt;a href=&quot;/dashboard&quot; className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300/70 rounded px-4 py-2 hover:border-orange-300 transition bg-white/60 backdrop-blur-sm&quot;&gt;Orange Blossom&lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a href=&quot;/dashboard&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition bg-white/70&quot;&gt;Dashboard&lt;/a&gt;&#10;          &lt;a href=&quot;/profile&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition bg-white/70&quot;&gt;Profile&lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      {loading ? (&#10;        &lt;div className=&quot;w-full max-w-2xl rounded-xl border border-gray-200 bg-white shadow-sm p-6 animate-pulse&quot;&gt;&#10;          &lt;div className=&quot;h-6 w-1/3 bg-gray-200 rounded mb-4&quot; /&gt;&#10;          &lt;div className=&quot;flex gap-2 mb-6&quot;&gt;&#10;            &lt;div className=&quot;h-5 w-16 bg-gray-200 rounded&quot; /&gt;&#10;            &lt;div className=&quot;h-5 w-20 bg-gray-200 rounded&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            &lt;div className=&quot;h-3 w-full bg-gray-200 rounded&quot; /&gt;&#10;            &lt;div className=&quot;h-3 w-5/6 bg-gray-200 rounded&quot; /&gt;&#10;            &lt;div className=&quot;h-3 w-2/3 bg-gray-200 rounded&quot; /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      ) : error ? (&#10;        &lt;div className=&quot;w-full max-w-2xl text-red-500 text-sm border border-red-200 bg-red-50 rounded-lg p-4&quot;&gt;{error}&lt;/div&gt;&#10;      ) : !idea ? (&#10;        &lt;div className=&quot;text-gray-400&quot;&gt;Not found.&lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;w-full max-w-2xl flex flex-col gap-6&quot;&gt;&#10;          &lt;section className=&quot;rounded-xl border border-gray-200 bg-white shadow-sm overflow-hidden&quot;&gt;&#10;            {imageUrl &amp;&amp; (&#10;              &lt;div className=&quot;relative&quot;&gt;&#10;                &lt;img src={imageUrl} alt={idea.title} className=&quot;w-full h-64 object-cover&quot; /&gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-gradient-to-t from-black/40 to-transparent&quot; /&gt;&#10;                &lt;div className=&quot;absolute bottom-4 left-5 flex flex-wrap gap-2&quot;&gt;&#10;                  {tags.map(t =&gt; (&#10;                    &lt;span key={t} className=&quot;text-[10px] uppercase tracking-wide bg-white/90 text-gray-600 border border-gray-300 rounded px-2 py-0.5 backdrop-blur-sm&quot;&gt;{t}&lt;/span&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;            &lt;div className=&quot;p-6 flex flex-col gap-5&quot;&gt;&#10;              &lt;div className=&quot;flex items-start justify-between gap-4&quot;&gt;&#10;                &lt;h1 className=&quot;text-2xl font-semibold leading-snug text-gray-800 flex-1&quot;&gt;{idea.title}&lt;/h1&gt;&#10;                &lt;div className=&quot;flex flex-col gap-2 text-xs text-gray-400 items-end&quot;&gt;&#10;                  &lt;button onClick={toggleLike} disabled={!sessionUserId} className={`px-3 py-1 rounded-full border text-xs font-medium transition ${liked? 'border-orange-400 text-orange-600 bg-orange-50':'border-gray-300 text-gray-500 hover:border-orange-300'}`}&gt;❤ {likeCount}&lt;/button&gt;&#10;                  &lt;button onClick={toggleBookmark} disabled={!sessionUserId} className={`px-3 py-1 rounded-full border text-xs font-medium transition ${bookmarked? 'border-orange-400 text-orange-600 bg-orange-50':'border-gray-300 text-gray-500 hover:border-orange-300'}`}&gt;★ {bookmarkCount}&lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {idea.category &amp;&amp; &lt;span className=&quot;px-3 py-1 rounded-full bg-orange-50 text-orange-600 text-xs font-medium border border-orange-200&quot;&gt;{idea.category}&lt;/span&gt;}&#10;                {idea.time_required &amp;&amp; &lt;span className=&quot;px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-xs font-medium border border-gray-200&quot;&gt;{idea.time_required} min&lt;/span&gt;}&#10;                {idea.profiles?.username &amp;&amp; &lt;span className=&quot;px-3 py-1 rounded-full bg-gray-100 text-gray-500 text-xs border border-gray-200&quot;&gt;by {idea.profiles.username}&lt;/span&gt;}&#10;                {!imageUrl &amp;&amp; tags.length &gt; 0 &amp;&amp; tags.map(t =&gt; (&#10;                  &lt;span key={t} className=&quot;px-2 py-0.5 rounded-full bg-gray-50 text-gray-500 text-[10px] uppercase tracking-wide border border-gray-200&quot;&gt;{t}&lt;/span&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;              {idea.description &amp;&amp; (&#10;                &lt;div className=&quot;prose prose-sm max-w-none text-gray-700 whitespace-pre-line leading-relaxed&quot;&gt;&#10;                  {idea.description}&#10;                &lt;/div&gt;&#10;              )}&#10;              {idea.supplies &amp;&amp; (&#10;                &lt;div className=&quot;text-sm text-gray-600 bg-gray-50 border border-gray-200 rounded-lg p-4&quot;&gt;&#10;                  &lt;span className=&quot;font-medium text-gray-700&quot;&gt;Supplies:&lt;/span&gt; {idea.supplies}&#10;                &lt;/div&gt;&#10;              )}&#10;              {sessionUserId === idea.user_id &amp;&amp; (&#10;                &lt;div className=&quot;flex flex-wrap gap-3 pt-2&quot;&gt;&#10;                  &lt;a href={`/ideas/${idea.id}/edit`} className=&quot;inline-flex items-center gap-1 px-4 py-2 rounded-lg border border-gray-300 text-gray-600 hover:border-orange-300 hover:text-orange-600 transition text-sm&quot;&gt;Edit&lt;/a&gt;&#10;                  &lt;button onClick={handleDelete} disabled={deleting} className=&quot;inline-flex items-center gap-1 px-4 py-2 rounded-lg border border-red-300 text-red-500 hover:border-red-500 hover:bg-red-50 transition text-sm disabled:opacity-50&quot;&gt;{deleting ? 'Deleting…' : 'Delete'}&lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;div className=&quot;pt-4 border-t border-gray-100 flex justify-between items-center&quot;&gt;&#10;                &lt;a href=&quot;/dashboard&quot; className=&quot;text-sm text-gray-500 hover:text-orange-600 transition&quot;&gt;← Back to dashboard&lt;/a&gt;&#10;                &lt;div className=&quot;text-[11px] text-gray-400&quot;&gt;Self Care Idea&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/section&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useParams, useRouter } from &quot;next/navigation&quot;;&#10;import { supabase } from &quot;../../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../../utils/ensureProfile&quot;;&#10;&#10;interface Idea {&#10;  id: string;&#10;  title: string;&#10;  category: string | null;&#10;  description: string | null;&#10;  supplies: string | null;&#10;  time_required: number | null;&#10;  user_id: string;&#10;  profiles?: { username?: string };&#10;}&#10;&#10;export default function IdeaDetailPage() {&#10;  const params = useParams();&#10;  const router = useRouter();&#10;  const ideaId = params?.id as string;&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [sessionUserId, setSessionUserId] = useState&lt;string | null&gt;(null);&#10;  const [idea, setIdea] = useState&lt;Idea | null&gt;(null);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [deleting, setDeleting] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    const init = async () =&gt; {&#10;      const { data: { session } } = await supabase.auth.getSession();&#10;      if (!mounted) return;&#10;      setSessionUserId(session?.user?.id || null);&#10;      setAuthChecked(true);&#10;      ensureProfile();&#10;    };&#10;    init();&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_e, session) =&gt; {&#10;      if (!mounted) return;&#10;      setSessionUserId(session?.user?.id || null);&#10;    });&#10;    return () =&gt; { mounted = false; listener?.subscription.unsubscribe(); };&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!ideaId) return;&#10;    const fetchIdea = async () =&gt; {&#10;      setLoading(true);&#10;      setError(null);&#10;      const { data, error } = await supabase&#10;        .from(&quot;self_care_ideas&quot;)&#10;        .select(&quot;id, title, category, description, supplies, time_required, user_id, profiles:profiles!self_care_ideas_user_id_fkey(username)&quot;)&#10;        .eq(&quot;id&quot;, ideaId)&#10;        .single();&#10;      if (error) setError(error.message); else setIdea(data as Idea);&#10;      setLoading(false);&#10;    };&#10;    fetchIdea();&#10;  }, [ideaId]);&#10;&#10;  const handleDelete = async () =&gt; {&#10;    if (!idea) return;&#10;    if (!confirm(&quot;Delete this idea?&quot;)) return;&#10;    setDeleting(true);&#10;    const { error } = await supabase.from(&quot;self_care_ideas&quot;).delete().eq(&quot;id&quot;, idea.id);&#10;    if (error) {&#10;      alert(error.message);&#10;      setDeleting(false);&#10;      return;&#10;    }&#10;    router.push('/dashboard');&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gradient-to-b from-white to-gray-100 font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-2xl flex justify-between items-center mb-6&quot;&gt;&#10;        &lt;a href=&quot;/dashboard&quot; className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300/70 rounded px-4 py-2 hover:border-orange-300 transition bg-white/60 backdrop-blur-sm&quot;&gt;Orange Blossom&lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a href=&quot;/dashboard&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition bg-white/70&quot;&gt;Dashboard&lt;/a&gt;&#10;          &lt;a href=&quot;/profile&quot; className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition bg-white/70&quot;&gt;Profile&lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      {loading ? (&#10;        &lt;div className=&quot;w-full max-w-2xl rounded-xl border border-gray-200 bg-white shadow-sm p-6 animate-pulse&quot;&gt;&#10;          &lt;div className=&quot;h-6 w-1/3 bg-gray-200 rounded mb-4&quot; /&gt;&#10;          &lt;div className=&quot;flex gap-2 mb-6&quot;&gt;&#10;            &lt;div className=&quot;h-5 w-16 bg-gray-200 rounded&quot; /&gt;&#10;            &lt;div className=&quot;h-5 w-20 bg-gray-200 rounded&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            &lt;div className=&quot;h-3 w-full bg-gray-200 rounded&quot; /&gt;&#10;            &lt;div className=&quot;h-3 w-5/6 bg-gray-200 rounded&quot; /&gt;&#10;            &lt;div className=&quot;h-3 w-2/3 bg-gray-200 rounded&quot; /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      ) : error ? (&#10;        &lt;div className=&quot;w-full max-w-2xl text-red-500 text-sm border border-red-200 bg-red-50 rounded-lg p-4&quot;&gt;{error}&lt;/div&gt;&#10;      ) : !idea ? (&#10;        &lt;div className=&quot;text-gray-400&quot;&gt;Not found.&lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;w-full max-w-2xl flex flex-col gap-6&quot;&gt;&#10;          &lt;section className=&quot;rounded-xl border border-gray-200 bg-white shadow-sm overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;p-6 flex flex-col gap-5&quot;&gt;&#10;              &lt;div className=&quot;flex items-start justify-between gap-4&quot;&gt;&#10;                &lt;h1 className=&quot;text-2xl font-semibold leading-snug text-gray-800 flex-1&quot;&gt;{idea.title}&lt;/h1&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                {idea.category &amp;&amp; &lt;span className=&quot;px-3 py-1 rounded-full bg-orange-50 text-orange-600 text-xs font-medium border border-orange-200&quot;&gt;{idea.category}&lt;/span&gt;}&#10;                {idea.time_required &amp;&amp; &lt;span className=&quot;px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-xs font-medium border border-gray-200&quot;&gt;{idea.time_required} min&lt;/span&gt;}&#10;                {idea.profiles?.username &amp;&amp; &lt;span className=&quot;px-3 py-1 rounded-full bg-gray-100 text-gray-500 text-xs border border-gray-200&quot;&gt;by {idea.profiles.username}&lt;/span&gt;}&#10;              &lt;/div&gt;&#10;              {idea.description &amp;&amp; (&#10;                &lt;div className=&quot;prose prose-sm max-w-none text-gray-700 whitespace-pre-line leading-relaxed&quot;&gt;&#10;                  {idea.description}&#10;                &lt;/div&gt;&#10;              )}&#10;              {idea.supplies &amp;&amp; (&#10;                &lt;div className=&quot;text-sm text-gray-600 bg-gray-50 border border-gray-200 rounded-lg p-4&quot;&gt;&#10;                  &lt;span className=&quot;font-medium text-gray-700&quot;&gt;Supplies:&lt;/span&gt; {idea.supplies}&#10;                &lt;/div&gt;&#10;              )}&#10;              {sessionUserId === idea.user_id &amp;&amp; (&#10;                &lt;div className=&quot;flex flex-wrap gap-3 pt-2&quot;&gt;&#10;                  &lt;a href={`/ideas/${idea.id}/edit`} className=&quot;inline-flex items-center gap-1 px-4 py-2 rounded-lg border border-gray-300 text-gray-600 hover:border-orange-300 hover:text-orange-600 transition text-sm&quot;&gt;Edit&lt;/a&gt;&#10;                  &lt;button onClick={handleDelete} disabled={deleting} className=&quot;inline-flex items-center gap-1 px-4 py-2 rounded-lg border border-red-300 text-red-500 hover:border-red-500 hover:bg-red-50 transition text-sm disabled:opacity-50&quot;&gt;{deleting ? 'Deleting…' : 'Delete'}&lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;div className=&quot;pt-4 border-t border-gray-100 flex justify-between items-center&quot;&gt;&#10;                &lt;a href=&quot;/dashboard&quot; className=&quot;text-sm text-gray-500 hover:text-orange-600 transition&quot;&gt;← Back to dashboard&lt;/a&gt;&#10;                &lt;div className=&quot;text-[11px] text-gray-400&quot;&gt;Self Care Idea&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/section&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/login/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/login/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { supabase } from &quot;../utils/supabaseClient&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function LoginPage() {&#10;  const [email, setEmail] = useState(&quot;&quot;);&#10;  const [password, setPassword] = useState(&quot;&quot;);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [loading, setLoading] = useState(false);&#10;  const router = useRouter();&#10;&#10;  async function handleLogin(e: React.FormEvent) {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(null);&#10;    const { error } = await supabase.auth.signInWithPassword({ email, password });&#10;    setLoading(false);&#10;    if (error) {&#10;      setError(error.message);&#10;    } else {&#10;      router.replace(&quot;/dashboard&quot;);&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen flex flex-col items-center justify-center bg-white px-4&quot;&gt;&#10;      &lt;h2 className=&quot;text-2xl font-bold mb-4 text-gray-700&quot;&gt;Log In&lt;/h2&gt;&#10;      &lt;form onSubmit={handleLogin} className=&quot;w-full max-w-sm flex flex-col gap-4&quot;&gt;&#10;        &lt;input&#10;          type=&quot;email&quot;&#10;          placeholder=&quot;Email&quot;&#10;          value={email}&#10;          onChange={e =&gt; setEmail(e.target.value)}&#10;          required&#10;          className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 bg-white&quot;&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;password&quot;&#10;          placeholder=&quot;Password&quot;&#10;          value={password}&#10;          onChange={e =&gt; setPassword(e.target.value)}&#10;          required&#10;          className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 bg-white&quot;&#10;        /&gt;&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          disabled={loading}&#10;          className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-500 bg-white hover:border-orange-300 transition&quot;&#10;        &gt;&#10;          {loading ? &quot;Logging in...&quot; : &quot;Log In&quot;}&#10;        &lt;/button&gt;&#10;        {error &amp;&amp; &lt;div className=&quot;text-red-500 text-sm&quot;&gt;{error}&lt;/div&gt;}&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { supabase } from &quot;../utils/supabaseClient&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function LoginPage() {&#10;  const [email, setEmail] = useState(&quot;&quot;);&#10;  const [password, setPassword] = useState(&quot;&quot;);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [loading, setLoading] = useState(false);&#10;  const router = useRouter();&#10;&#10;  async function handleLogin(e: React.FormEvent) {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(null);&#10;    const { error } = await supabase.auth.signInWithPassword({ email, password });&#10;    setLoading(false);&#10;    if (error) {&#10;      setError(error.message);&#10;    } else {&#10;      router.replace(&quot;/dashboard&quot;);&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen flex flex-col items-center justify-center bg-white px-4&quot;&gt;&#10;      &lt;h2 className=&quot;text-2xl font-bold mb-4 text-gray-700&quot;&gt;Log In&lt;/h2&gt;&#10;      &lt;form onSubmit={handleLogin} className=&quot;w-full max-w-sm flex flex-col gap-4&quot;&gt;&#10;        &lt;input&#10;          type=&quot;email&quot;&#10;          placeholder=&quot;Email&quot;&#10;          value={email}&#10;          onChange={e =&gt; setEmail(e.target.value)}&#10;          required&#10;          className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 bg-white&quot;&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;password&quot;&#10;          placeholder=&quot;Password&quot;&#10;          value={password}&#10;          onChange={e =&gt; setPassword(e.target.value)}&#10;          required&#10;          className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 bg-white&quot;&#10;        /&gt;&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          disabled={loading}&#10;          className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-500 bg-white hover:border-orange-300 transition&quot;&#10;        &gt;&#10;          {loading ? &quot;Logging in...&quot; : &quot;Log In&quot;}&#10;        &lt;/button&gt;&#10;        {error &amp;&amp; &lt;div className=&quot;text-red-500 text-sm&quot;&gt;{error}&lt;/div&gt;}&#10;      &lt;/form&gt;&#10;      &lt;div className=&quot;mt-6 text-sm text-gray-500&quot;&gt;&#10;        Need an account?{' '}&#10;        &lt;a href=&quot;/signup&quot; className=&quot;underline hover:text-gray-700&quot;&gt;Sign Up&lt;/a&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;&#10;export default function Home() {&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center justify-center px-4 py-8 sm:py-16&quot;&gt;&#10;      &lt;header className=&quot;mb-8 text-center&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold tracking-widest text-gray-900 mb-6&quot;&gt;&#10;          ORANGE BLOSSOM&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-lg text-gray-500&quot;&gt;Your self care companion&lt;/p&gt;&#10;        &lt;div className=&quot;flex flex-col items-center gap-4&quot;&gt;&#10;          &lt;a&#10;            href=&quot;/login&quot;&#10;            className=&quot;border border-gray-300 rounded px-6 py-3 text-gray-500 hover:border-orange-300 transition font-semibold text-base&quot;&#10;          &gt;&#10;            Start building your self care dictionary&#10;          &lt;/a&gt;&#10;          &lt;div className=&quot;flex gap-3 mt-4&quot;&gt;&#10;            &lt;a&#10;              href=&quot;/login&quot;&#10;              className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;            &gt;&#10;              Log In&#10;            &lt;/a&gt;&#10;            &lt;a&#10;              href=&quot;/signup&quot;&#10;              className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;            &gt;&#10;              Sign Up&#10;            &lt;/a&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/header&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Image from &quot;next/image&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;&#10;export default function Home() {&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center justify-center px-4 py-8 sm:py-16&quot;&gt;&#10;      &lt;header className=&quot;mb-8 text-center&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold tracking-widest text-gray-900 mb-6&quot;&gt;&#10;          ORANGE BLOSSOM&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-lg text-gray-500 mb-10&quot;&gt;Your self care companion&lt;/p&gt;&#10;        &lt;div className=&quot;flex flex-col items-center gap-4 pt-2&quot;&gt;&#10;          &lt;a&#10;            href=&quot;/login&quot;&#10;            className=&quot;border border-gray-300 rounded px-6 py-3 text-gray-500 hover:border-orange-300 transition font-semibold text-base&quot;&#10;          &gt;&#10;            Start building your self care dictionary&#10;          &lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/header&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/profile/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/profile/page.tsx" />
              <option name="originalContent" value="import { useEffect, useState } from &quot;react&quot;;&#10;import { supabase } from &quot;../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../utils/ensureProfile&quot;;&#10;&#10;interface ProfileRow {&#10;  id: string;&#10;  username: string | null;&#10;  full_name: string | null;&#10;  email: string | null;&#10;}&#10;&#10;export default function ProfilePage() {&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [isAuthed, setIsAuthed] = useState(false);&#10;  const [loadingProfile, setLoadingProfile] = useState(true);&#10;  const [saving, setSaving] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [status, setStatus] = useState&lt;string | null&gt;(null);&#10;  const [profile, setProfile] = useState&lt;ProfileRow | null&gt;(null);&#10;  const [username, setUsername] = useState(&quot;&quot;);&#10;  const [fullName, setFullName] = useState(&quot;&quot;);&#10;&#10;  // Auth guard similar to dashboard&#10;  useEffect(() =&gt; {&#10;    let isMounted = true;&#10;    const check = async () =&gt; {&#10;      const { data } = await supabase.auth.getSession();&#10;      if (!isMounted) return;&#10;      setIsAuthed(!!data.session);&#10;      setAuthChecked(true);&#10;      if (!data.session) {&#10;        window.location.replace(&quot;/login&quot;);&#10;      }&#10;    };&#10;    check();&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_e, session) =&gt; {&#10;      if (!isMounted) return;&#10;      setIsAuthed(!!session);&#10;      if (!session) {&#10;        window.location.replace(&quot;/login&quot;);&#10;      }&#10;    });&#10;    return () =&gt; {&#10;      isMounted = false;&#10;      listener?.subscription.unsubscribe();&#10;    };&#10;  }, []);&#10;&#10;  // Load profile&#10;  useEffect(() =&gt; {&#10;    if (!isAuthed) return;&#10;    const load = async () =&gt; {&#10;      setLoadingProfile(true);&#10;      await ensureProfile();&#10;      const { data: { user } } = await supabase.auth.getUser();&#10;      if (!user) return;&#10;      const { data, error } = await supabase&#10;        .from(&quot;profiles&quot;)&#10;        .select(&quot;id, username, full_name, email&quot;)&#10;        .eq(&quot;id&quot;, user.id)&#10;        .single();&#10;      if (error) {&#10;        setError(error.message);&#10;      } else if (data) {&#10;        setProfile(data as ProfileRow);&#10;        setUsername(data.username || &quot;&quot;);&#10;        setFullName(data.full_name || &quot;&quot;);&#10;      }&#10;      setLoadingProfile(false);&#10;    };&#10;    load();&#10;  }, [isAuthed]);&#10;&#10;  const handleSave = async () =&gt; {&#10;    if (!profile) return;&#10;    setError(null);&#10;    setStatus(null);&#10;    const cleanedUser = username.trim().toLowerCase().replace(/[^a-z0-9_]/g, &quot;_&quot;).slice(0, 32);&#10;    if (!cleanedUser) {&#10;      setError(&quot;Username required&quot;);&#10;      return;&#10;    }&#10;    setSaving(true);&#10;    const { error } = await supabase&#10;      .from(&quot;profiles&quot;)&#10;      .update({ username: cleanedUser, full_name: fullName || null, updated_at: new Date().toISOString() })&#10;      .eq(&quot;id&quot;, profile.id);&#10;    if (error) {&#10;      if ((error as any).code === &quot;23505&quot;) {&#10;        setError(&quot;Username already taken&quot;);&#10;      } else {&#10;        setError(error.message);&#10;      }&#10;    } else {&#10;      setStatus(&quot;Profile updated&quot;);&#10;    }&#10;    setSaving(false);&#10;  };&#10;&#10;  const handleLogout = async () =&gt; {&#10;    await supabase.auth.signOut();&#10;    window.location.replace(&quot;/login&quot;);&#10;  };&#10;&#10;  if (!authChecked) {&#10;    return &lt;div className=&quot;min-h-screen flex items-center justify-center text-gray-400&quot;&gt;Checking authentication...&lt;/div&gt;;&#10;  }&#10;  if (!isAuthed) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      {/* Top Nav */}&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-between items-center mb-4&quot;&gt;&#10;        &lt;a&#10;          href=&quot;/dashboard&quot;&#10;          className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300 rounded px-4 py-2 hover:border-orange-300 transition&quot;&#10;        &gt;&#10;          Orange Blossom&#10;        &lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a&#10;            href=&quot;/dashboard&quot;&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Dashboard&#10;          &lt;/a&gt;&#10;          &lt;a&#10;            href=&quot;/profile&quot;&#10;            className=&quot;border border-orange-300 rounded px-4 py-2 text-gray-700 bg-orange-50&quot;&#10;          &gt;&#10;            Profil&#10;          &lt;/a&gt;&#10;          &lt;button&#10;            onClick={handleLogout}&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Log Out&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6 text-gray-700&quot;&gt;Profile&lt;/h1&gt;&#10;&#10;      {loadingProfile ? (&#10;        &lt;div className=&quot;text-gray-400&quot;&gt;Loading profile...&lt;/div&gt;&#10;      ) : error ? (&#10;        &lt;div className=&quot;text-red-500 text-sm mb-4&quot;&gt;{error}&lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-6 bg-white shadow-sm&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col gap-4&quot;&gt;&#10;            &lt;label className=&quot;flex flex-col gap-1 text-sm text-gray-600&quot;&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Email (read-only)&lt;/span&gt;&#10;              &lt;input&#10;                value={profile?.email || &quot;&quot;}&#10;                disabled&#10;                className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-500 bg-gray-50 cursor-not-allowed&quot;&#10;              /&gt;&#10;            &lt;/label&gt;&#10;            &lt;label className=&quot;flex flex-col gap-1 text-sm text-gray-600&quot;&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Username&lt;/span&gt;&#10;              &lt;input&#10;                value={username}&#10;                onChange={(e) =&gt; setUsername(e.target.value)}&#10;                placeholder=&quot;your_username&quot;&#10;                className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot;&#10;              /&gt;&#10;            &lt;/label&gt;&#10;            &lt;label className=&quot;flex flex-col gap-1 text-sm text-gray-600&quot;&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Full Name&lt;/span&gt;&#10;              &lt;input&#10;                value={fullName}&#10;                onChange={(e) =&gt; setFullName(e.target.value)}&#10;                placeholder=&quot;Full name&quot;&#10;                className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot;&#10;              /&gt;&#10;            &lt;/label&gt;&#10;            &lt;div className=&quot;flex items-center gap-3 mt-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleSave}&#10;                disabled={saving}&#10;                className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-600 hover:border-orange-300 disabled:opacity-50&quot;&#10;              &gt;&#10;                {saving ? &quot;Saving...&quot; : &quot;Save&quot;}&#10;              &lt;/button&gt;&#10;              {status &amp;&amp; &lt;span className=&quot;text-xs text-green-600&quot;&gt;{status}&lt;/span&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { supabase } from &quot;../utils/supabaseClient&quot;;&#10;import { ensureProfile } from &quot;../utils/ensureProfile&quot;;&#10;&#10;interface ProfileRow {&#10;  id: string;&#10;  username: string | null;&#10;  full_name: string | null;&#10;  email: string | null;&#10;}&#10;&#10;export default function ProfilePage() {&#10;  const [authChecked, setAuthChecked] = useState(false);&#10;  const [isAuthed, setIsAuthed] = useState(false);&#10;  const [loadingProfile, setLoadingProfile] = useState(true);&#10;  const [saving, setSaving] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [status, setStatus] = useState&lt;string | null&gt;(null);&#10;  const [profile, setProfile] = useState&lt;ProfileRow | null&gt;(null);&#10;  const [username, setUsername] = useState(&quot;&quot;);&#10;  const [fullName, setFullName] = useState(&quot;&quot;);&#10;&#10;  // Auth guard similar to dashboard&#10;  useEffect(() =&gt; {&#10;    let isMounted = true;&#10;    const check = async () =&gt; {&#10;      const { data } = await supabase.auth.getSession();&#10;      if (!isMounted) return;&#10;      setIsAuthed(!!data.session);&#10;      setAuthChecked(true);&#10;      if (!data.session) {&#10;        window.location.replace(&quot;/login&quot;);&#10;      }&#10;    };&#10;    check();&#10;    const { data: listener } = supabase.auth.onAuthStateChange((_e, session) =&gt; {&#10;      if (!isMounted) return;&#10;      setIsAuthed(!!session);&#10;      if (!session) {&#10;        window.location.replace(&quot;/login&quot;);&#10;      }&#10;    });&#10;    return () =&gt; {&#10;      isMounted = false;&#10;      listener?.subscription.unsubscribe();&#10;    };&#10;  }, []);&#10;&#10;  // Load profile&#10;  useEffect(() =&gt; {&#10;    if (!isAuthed) return;&#10;    const load = async () =&gt; {&#10;      setLoadingProfile(true);&#10;      await ensureProfile();&#10;      const { data: { user } } = await supabase.auth.getUser();&#10;      if (!user) return;&#10;      const { data, error } = await supabase&#10;        .from(&quot;profiles&quot;)&#10;        .select(&quot;id, username, full_name, email&quot;)&#10;        .eq(&quot;id&quot;, user.id)&#10;        .single();&#10;      if (error) {&#10;        setError(error.message);&#10;      } else if (data) {&#10;        setProfile(data as ProfileRow);&#10;        setUsername(data.username || &quot;&quot;);&#10;        setFullName(data.full_name || &quot;&quot;);&#10;      }&#10;      setLoadingProfile(false);&#10;    };&#10;    load();&#10;  }, [isAuthed]);&#10;&#10;  const handleSave = async () =&gt; {&#10;    if (!profile) return;&#10;    setError(null);&#10;    setStatus(null);&#10;    const cleanedUser = username.trim().toLowerCase().replace(/[^a-z0-9_]/g, &quot;_&quot;).slice(0, 32);&#10;    if (!cleanedUser) {&#10;      setError(&quot;Username required&quot;);&#10;      return;&#10;    }&#10;    setSaving(true);&#10;    const { error } = await supabase&#10;      .from(&quot;profiles&quot;)&#10;      .update({ username: cleanedUser, full_name: fullName || null, updated_at: new Date().toISOString() })&#10;      .eq(&quot;id&quot;, profile.id);&#10;    if (error) {&#10;      if ((error as any).code === &quot;23505&quot;) {&#10;        setError(&quot;Username already taken&quot;);&#10;      } else {&#10;        setError(error.message);&#10;      }&#10;    } else {&#10;      setStatus(&quot;Profile updated&quot;);&#10;    }&#10;    setSaving(false);&#10;  };&#10;&#10;  const handleLogout = async () =&gt; {&#10;    await supabase.auth.signOut();&#10;    window.location.replace(&quot;/login&quot;);&#10;  };&#10;&#10;  if (!authChecked) {&#10;    return &lt;div className=&quot;min-h-screen flex items-center justify-center text-gray-400&quot;&gt;Checking authentication...&lt;/div&gt;;&#10;  }&#10;  if (!isAuthed) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-white font-sans flex flex-col items-center px-4 py-8&quot;&gt;&#10;      {/* Top Nav */}&#10;      &lt;div className=&quot;w-full max-w-xl flex justify-between items-center mb-4&quot;&gt;&#10;        &lt;a&#10;          href=&quot;/dashboard&quot;&#10;          className=&quot;font-bold tracking-widest text-gray-700 text-base border border-gray-300 rounded px-4 py-2 hover:border-orange-300 transition&quot;&#10;        &gt;&#10;          Orange Blossom&#10;        &lt;/a&gt;&#10;        &lt;div className=&quot;flex gap-3&quot;&gt;&#10;          &lt;a&#10;            href=&quot;/dashboard&quot;&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Dashboard&#10;          &lt;/a&gt;&#10;          &lt;a&#10;            href=&quot;/profile&quot;&#10;            className=&quot;border border-orange-300 rounded px-4 py-2 text-gray-700 bg-orange-50&quot;&#10;          &gt;&#10;            Profile&#10;          &lt;/a&gt;&#10;          &lt;button&#10;            onClick={handleLogout}&#10;            className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-500 hover:border-orange-300 transition&quot;&#10;          &gt;&#10;            Log Out&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6 text-gray-700&quot;&gt;Profile&lt;/h1&gt;&#10;&#10;      {loadingProfile ? (&#10;        &lt;div className=&quot;text-gray-400&quot;&gt;Loading profile...&lt;/div&gt;&#10;      ) : error ? (&#10;        &lt;div className=&quot;text-red-500 text-sm mb-4&quot;&gt;{error}&lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;w-full max-w-xl border border-gray-200 rounded-lg p-6 bg-white shadow-sm&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col gap-4&quot;&gt;&#10;            &lt;label className=&quot;flex flex-col gap-1 text-sm text-gray-600&quot;&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Email (read-only)&lt;/span&gt;&#10;              &lt;input&#10;                value={profile?.email || &quot;&quot;}&#10;                disabled&#10;                className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-500 bg-gray-50 cursor-not-allowed&quot;&#10;              /&gt;&#10;            &lt;/label&gt;&#10;            &lt;label className=&quot;flex flex-col gap-1 text-sm text-gray-600&quot;&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Username&lt;/span&gt;&#10;              &lt;input&#10;                value={username}&#10;                onChange={(e) =&gt; setUsername(e.target.value)}&#10;                placeholder=&quot;your_username&quot;&#10;                className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot;&#10;              /&gt;&#10;            &lt;/label&gt;&#10;            &lt;label className=&quot;flex flex-col gap-1 text-sm text-gray-600&quot;&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Full Name&lt;/span&gt;&#10;              &lt;input&#10;                value={fullName}&#10;                onChange={(e) =&gt; setFullName(e.target.value)}&#10;                placeholder=&quot;Full name&quot;&#10;                className=&quot;border border-gray-300 rounded px-3 py-2 text-gray-700 focus:outline-none focus:border-orange-300&quot;&#10;              /&gt;&#10;            &lt;/label&gt;&#10;            &lt;div className=&quot;flex items-center gap-3 mt-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleSave}&#10;                disabled={saving}&#10;                className=&quot;border border-gray-300 rounded px-4 py-2 text-gray-600 hover:border-orange-300 disabled:opacity-50&quot;&#10;              &gt;&#10;                {saving ? &quot;Saving...&quot; : &quot;Save&quot;}&#10;              &lt;/button&gt;&#10;              {status &amp;&amp; &lt;span className=&quot;text-xs text-green-600&quot;&gt;{status}&lt;/span&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/utils/constants.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/utils/constants.ts" />
              <option name="updatedContent" value="export const CATEGORY_VALUES = [&#10;  &quot;Creative&quot;,&#10;  &quot;Relaxing&quot;,&#10;  &quot;Mindful&quot;,&#10;  &quot;Energizing&quot;,&#10;  &quot;Restorative&quot;,&#10;  &quot;Social&quot;,&#10;  &quot;Financial&quot;,&#10;  &quot;Nourishing&quot;,&#10;  &quot;Organizing&quot;,&#10;  &quot;Learning&quot;,&#10;  &quot;Nature-based&quot;,&#10;  &quot;Reflective&quot;,&#10;  &quot;Playful&quot;,&#10;  &quot;Confidence-building&quot;,&#10;  &quot;Gratifying&quot;&#10;] as const;&#10;&#10;export type CategoryValue = typeof CATEGORY_VALUES[number];&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/utils/ensureProfile.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/utils/ensureProfile.ts" />
              <option name="updatedContent" value="import { supabase } from './supabaseClient';&#10;&#10;// Ensures a profile row exists for the current authenticated user.&#10;// If missing, inserts a minimal record derived from the email.&#10;export async function ensureProfile() {&#10;  const { data: { user } } = await supabase.auth.getUser();&#10;  if (!user) return;&#10;  const { data: existing, error: selectErr } = await supabase&#10;    .from('profiles')&#10;    .select('id')&#10;    .eq('id', user.id)&#10;    .single();&#10;  if (selectErr &amp;&amp; selectErr.code !== 'PGRST116') {&#10;    // PGRST116 = No rows found; ignore&#10;    return;&#10;  }&#10;  if (!existing) {&#10;    const base = (user.email?.split('@')[0] || user.id)&#10;      .replace(/[^a-zA-Z0-9_]/g, '')&#10;      .slice(0, 24) || user.id;&#10;    await supabase.from('profiles').insert({&#10;      id: user.id,&#10;      username: base.toLowerCase(),&#10;      full_name: null,&#10;      email: user.email&#10;    });&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/utils/slugify.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/utils/slugify.ts" />
              <option name="updatedContent" value="export function slugify(input: string) {&#10;  return input&#10;    .toLowerCase()&#10;    .trim()&#10;    .replace(/[^a-z0-9]+/g, '-')&#10;    .replace(/^-+|-+$/g, '')&#10;    .slice(0, 80);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/utils/supabaseClient.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/utils/supabaseClient.ts" />
              <option name="updatedContent" value="import { createClient } from '@supabase/supabase-js';&#10;&#10;const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;&#10;const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;&#10;&#10;export const supabase = createClient(supabaseUrl, supabaseAnonKey);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/supabase.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/supabase.sql" />
              <option name="originalContent" value="-- Profiles table&#10;create table public.profiles (&#10;  id uuid primary key references auth.users(id) on delete cascade,&#10;  username text unique not null,&#10;  full_name text,&#10;  email text, -- mirror of auth.users.email (DO NOT store passwords)&#10;  created_at timestamptz default now(),&#10;  updated_at timestamptz default now()&#10;);&#10;&#10;-- (If applying to an existing project run separately in SQL editor):&#10;alter table public.profiles add column if not exists email text;&#10;create unique index if not exists profiles_email_lower_idx on public.profiles (lower(email));&#10;&#10;-- Self-care ideas table&#10;create table public.self_care_ideas (&#10;  id uuid primary key default gen_random_uuid(),&#10;  user_id uuid not null references public.profiles(id) on delete cascade,&#10;  created_at timestamptz default now(),&#10;  updated_at timestamptz default now(),&#10;  title text not null,&#10;  category text,&#10;  description text,&#10;  supplies text,&#10;  time_required int&#10;);&#10;&#10;-- Option B: Simple trigger to auto-create a profile row on new auth user (in addition to client upsert fallback)&#10;create or replace function public.handle_new_user()&#10;returns trigger&#10;language plpgsql&#10;security definer&#10;set search_path = public as $$&#10;begin&#10;  -- Basic derived username (before @) fallback to first 8 chars of UUID&#10;  insert into public.profiles (id, username, full_name, email)&#10;  values (&#10;    new.id,&#10;    coalesce(nullif(regexp_replace(split_part(new.email,'@',1),'[^a-zA-Z0-9_]+','', 'g'),''), substr(new.id::text,1,8)),&#10;    null,&#10;    new.email&#10;  )&#10;  on conflict (id) do nothing; -- ignore if client already inserted&#10;  return new;&#10;end;$$;&#10;&#10;drop trigger if exists on_auth_user_created on auth.users;&#10;create trigger on_auth_user_created&#10;after insert on auth.users&#10;for each row execute function public.handle_new_user();&#10;&#10;-- (Optional) one-time backfill (run manually then comment out)&#10;-- insert into public.profiles (id, username, full_name, email)&#10;-- select u.id,&#10;--        coalesce(nullif(regexp_replace(split_part(u.email,'@',1),'[^a-zA-Z0-9_]+','', 'g'),''), substr(u.id::text,1,8)),&#10;--        null,&#10;--        u.email&#10;-- from auth.users u&#10;-- left join public.profiles p on p.id = u.id&#10;-- where p.id is null;&#10;&#10;-- Enable RLS and policies for self_care_ideas&#10;alter table public.self_care_ideas enable row level security;&#10;&#10;create policy if not exists &quot;Public read self care ideas&quot; on public.self_care_ideas&#10;for select using (true);&#10;&#10;create policy if not exists &quot;Users insert own self care ideas&quot; on public.self_care_ideas&#10;for insert with check (auth.uid() = user_id);&#10;&#10;create policy if not exists &quot;Users update own self care ideas&quot; on public.self_care_ideas&#10;for update using (auth.uid() = user_id) with check (auth.uid() = user_id);&#10;&#10;create policy if not exists &quot;Users delete own self care ideas&quot; on public.self_care_ideas&#10;for delete using (auth.uid() = user_id);&#10;&#10;create index if not exists self_care_ideas_created_at_idx on public.self_care_ideas (created_at desc);&#10;" />
              <option name="updatedContent" value="-- Profiles table&#10;create table public.profiles (&#10;  id uuid primary key references auth.users(id) on delete cascade,&#10;  username text unique not null,&#10;  full_name text,&#10;  email text, -- mirror of auth.users.email (DO NOT store passwords)&#10;  created_at timestamptz default now(),&#10;  updated_at timestamptz default now()&#10;);&#10;&#10;-- (If applying to an existing project run separately in SQL editor):&#10;alter table public.profiles add column if not exists email text;&#10;create unique index if not exists profiles_email_lower_idx on public.profiles (lower(email));&#10;&#10;-- Self-care ideas table&#10;create table public.self_care_ideas (&#10;  id uuid primary key default gen_random_uuid(),&#10;  user_id uuid not null references public.profiles(id) on delete cascade,&#10;  created_at timestamptz default now(),&#10;  updated_at timestamptz default now(),&#10;  title text not null,&#10;  category text,&#10;  description text,&#10;  supplies text,&#10;  time_required int&#10;);&#10;&#10;-- Option B: Simple trigger to auto-create a profile row on new auth user (in addition to client upsert fallback)&#10;create or replace function public.handle_new_user()&#10;returns trigger&#10;language plpgsql&#10;security definer&#10;set search_path = public as $$&#10;begin&#10;  -- Basic derived username (before @) fallback to first 8 chars of UUID&#10;  insert into public.profiles (id, username, full_name, email)&#10;  values (&#10;    new.id,&#10;    coalesce(nullif(regexp_replace(split_part(new.email,'@',1),'[^a-zA-Z0-9_]+','', 'g'),''), substr(new.id::text,1,8)),&#10;    null,&#10;    new.email&#10;  )&#10;  on conflict (id) do nothing; -- ignore if client already inserted&#10;  return new;&#10;end;$$;&#10;&#10;drop trigger if exists on_auth_user_created on auth.users;&#10;create trigger on_auth_user_created&#10;after insert on auth.users&#10;for each row execute function public.handle_new_user();&#10;&#10;-- (Optional) one-time backfill (run manually then comment out)&#10;-- insert into public.profiles (id, username, full_name, email)&#10;-- select u.id,&#10;--        coalesce(nullif(regexp_replace(split_part(u.email,'@',1),'[^a-zA-Z0-9_]+','', 'g'),''), substr(u.id::text,1,8)),&#10;--        null,&#10;--        u.email&#10;-- from auth.users u&#10;-- left join public.profiles p on p.id = u.id&#10;-- where p.id is null;&#10;&#10;-- Enable RLS and policies for self_care_ideas&#10;alter table public.self_care_ideas enable row level security;&#10;&#10;create policy if not exists &quot;Public read self care ideas&quot; on public.self_care_ideas&#10;for select using (true);&#10;&#10;create policy if not exists &quot;Users insert own self care ideas&quot; on public.self_care_ideas&#10;for insert with check (auth.uid() = user_id);&#10;&#10;create policy if not exists &quot;Users update own self care ideas&quot; on public.self_care_ideas&#10;for update using (auth.uid() = user_id) with check (auth.uid() = user_id);&#10;&#10;create policy if not exists &quot;Users delete own self care ideas&quot; on public.self_care_ideas&#10;for delete using (auth.uid() = user_id);&#10;&#10;create index if not exists self_care_ideas_created_at_idx on public.self_care_ideas (created_at desc);&#10;&#10;-- Additional schema enhancements&#10;alter table public.self_care_ideas add column if not exists slug text;&#10;alter table public.self_care_ideas add column if not exists image_path text; -- storage key for a representative image&#10;&#10;-- Backfill slug for existing rows (safe to run multiple times)&#10;update public.self_care_ideas&#10;set slug = lower(regexp_replace(title, '[^a-zA-Z0-9]+', '-', 'g'))&#10;where slug is null;&#10;&#10;create unique index if not exists self_care_ideas_slug_idx on public.self_care_ideas(slug);&#10;&#10;-- Likes table&#10;create table if not exists public.idea_likes (&#10;  user_id uuid references public.profiles(id) on delete cascade,&#10;  idea_id uuid references public.self_care_ideas(id) on delete cascade,&#10;  created_at timestamptz default now(),&#10;  primary key(user_id, idea_id)&#10;);&#10;&#10;-- Bookmarks table&#10;create table if not exists public.idea_bookmarks (&#10;  user_id uuid references public.profiles(id) on delete cascade,&#10;  idea_id uuid references public.self_care_ideas(id) on delete cascade,&#10;  created_at timestamptz default now(),&#10;  primary key(user_id, idea_id)&#10;);&#10;&#10;-- Tags &amp; join (many-to-many)&#10;create table if not exists public.tags (&#10;  id bigserial primary key,&#10;  name text unique not null&#10;);&#10;&#10;create table if not exists public.idea_tags (&#10;  idea_id uuid references public.self_care_ideas(id) on delete cascade,&#10;  tag_id bigint references public.tags(id) on delete cascade,&#10;  primary key(idea_id, tag_id)&#10;);&#10;&#10;-- RLS for new tables&#10;alter table public.idea_likes enable row level security;&#10;alter table public.idea_bookmarks enable row level security;&#10;alter table public.tags enable row level security;&#10;alter table public.idea_tags enable row level security;&#10;&#10;create policy if not exists &quot;Read likes&quot; on public.idea_likes for select using (true);&#10;create policy if not exists &quot;Manage own likes&quot; on public.idea_likes for all using (auth.uid() = user_id) with check (auth.uid() = user_id);&#10;&#10;create policy if not exists &quot;Read bookmarks&quot; on public.idea_bookmarks for select using (true);&#10;create policy if not exists &quot;Manage own bookmarks&quot; on public.idea_bookmarks for all using (auth.uid() = user_id) with check (auth.uid() = user_id);&#10;&#10;create policy if not exists &quot;Read tags&quot; on public.tags for select using (true);&#10;create policy if not exists &quot;Insert tags when authed&quot; on public.tags for insert with check (auth.uid() is not null);&#10;&#10;create policy if not exists &quot;Read idea_tags&quot; on public.idea_tags for select using (true);&#10;create policy if not exists &quot;Manage idea_tags owner&quot; on public.idea_tags for insert using (&#10;  auth.uid() = (select user_id from public.self_care_ideas sci where sci.id = idea_tags.idea_id)&#10;) with check (&#10;  auth.uid() = (select user_id from public.self_care_ideas sci where sci.id = idea_tags.idea_id)&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>